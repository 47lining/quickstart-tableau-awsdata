{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Tableau AWS Data is a QuickStart that provides an integrated deployment of Tableau Server, Redshift cluster, RDS Postgress cluster in the same VPC through Cloudformation templates that provision and configure the required resources, including related QuickStarts. This awsdata template provisions all of the resources that are specific to the awsdata Quick Start.  Leveraged Quick Starts (VPC, bastion, RDGW), if needed, can be provisioned by using the awsdata-master template. **WARNING** This template creates Amazon EC2 Windows instance and related resources for Tableau Server. It also creates an Amazon EC2 Linux instance for SQL script execution, Amazon Redshift cluster a high-availability postgres RDS instance and IAM Roles required for EC2 and Redshift access to data in S3. You will be billed for the AWS resources used if you create a stack from this template. QS(5029)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "RootStackName",
                        "KeyPairName",
                        "QSS3BucketName",
                        "QSS3KeyPrefix",
                        "HostedZoneName"
                    ]
                },
                {
                    "Label": {
                        "default": "Existing VPC Values"
                    },
                    "Parameters": [
                        "PrivateSubnet1ID",
                        "PrivateSubnet2ID",
                        "PublicSubnet1ID",
                        "PublicSubnet2ID",
                        "VPCID",
                        "VPCCIDR"
                    ]
                },
                {
                    "Label": {
                        "default": "Required Parameters"
                    },
                    "Parameters": [
                        "BastionInboundCIDR",
                        "RDGWInboundCIDR",
                        "TableauServerInboundCIDR",
                        "RDGWAdminPassword",
                        "RedshiftPassword",
                        "RDSPassword",
                        "ContentAdminPassword",
                        "RegFirstName",
                        "RegLastName",
                        "RegEmail",
                        "RegCompany",
                        "RegTitle",
                        "RegDepartment",
                        "RegIndustry",
                        "RegPhone",
                        "RegCity",
                        "RegState",
                        "RegZip",
                        "RegCountry"
                    ]
                },
                {
                    "Label": {
                        "default": "Linux Bastion Configuration"
                    },
                    "Parameters": [
                        "BastionAMIOS",
                        "BastionInstanceType",
                        "BastionBanner"
                    ]
                },
                {
                    "Label": {
                        "default": "Remote Desktop Gateway Configuration"
                    },
                    "Parameters": [
                        "RDGWAdminUser",
                        "DomainDNSName",
                        "RDGWInstanceType",
                        "RDGW1NetBIOSName",
                        "RDGW1PrivateIP",
                        "RDGW2NetBIOSName",
                        "RDGW2PrivateIP"
                    ]
                },
                {
                    "Label": {
                        "default": "Redshift Cluster Configuration"
                    },
                    "Parameters": [
                        "RedshiftDatabaseName",
                        "RedshiftNumberOfNodes",
                        "RedshiftNodeType",
                        "RedshiftUsername",
                        "RedshiftInboundCIDR",
                        "RedshiftDatabasePort"
                    ]
                },
                {
                    "Label": {
                        "default": "Postgress RDS Instance Configuration"
                    },
                    "Parameters": [
                        "RDSInstanceIdentifier",
                        "RDSDatabasePort",
                        "RDSDatabaseName",
                        "RDSMultiAZ",
                        "RDSInstanceClass",
                        "RDSAllocatedStorage",
                        "RDSUsername",
                        "RDSInboundCIDR"
                    ]
                },
                {
                    "Label": {
                        "default": "SQL-Worker EC2 Instance Configuration"
                    },
                    "Parameters": [
                        "SqlWorkerInstanceType"
                    ]
                },
                {
                    "Label": {
                        "default": "Tableau Server EC2 Instance Configuration"
                    },
                    "Parameters": [
                        "ContentAdminUser",
                        "TableauServerLicenseKey"
                    ]
                }
            ],
            "ParameterLabels": {
                "BastionAMIOS": {
                    "default": "Bastion AMI Operating System"
                },
                "BastionBanner": {
                    "default": "Bastion Banner"
                },
                "BastionInboundCIDR": {
                    "default": "Bastion Inbound CIDR"
                },
                "BastionInstanceType": {
                    "default": "Bastion Instance Type"
                },
                "ContentAdminPassword": {
                    "default": "Content Admin Password"
                },
                "ContentAdminUser": {
                    "default": "Content Admin User"
                },
                "DomainDNSName": {
                    "default": "Domain DNS Name"
                },
                "HostedZoneName": {
                    "default": "Hosted Zone Name"
                },
                "KeyPairName": {
                    "default": "Key Pair Name"
                },
                "PrivateSubnet1ID": {
                    "default": "Existing VPC Private Subnet 1 ID"
                },
                "PrivateSubnet2ID": {
                    "default": "Existing VPC Private Subnet 2 ID"
                },
                "PublicSubnet1ID": {
                    "default": "Existing VPC Public Subnet1 ID"
                },
                "PublicSubnet2ID": {
                    "default": "Existing VPC Public Subnet2 ID"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "RDGW1NetBIOSName": {
                    "default": "Remote Desktop Gateway 1 NetBIOS Name"
                },
                "RDGW1PrivateIP": {
                    "default": "Remote Desktop Gateway 1 Private IP Address"
                },
                "RDGW2NetBIOSName": {
                    "default": "Remote Desktop Gateway 2 NetBIOS Name"
                },
                "RDGW2PrivateIP": {
                    "default": "Remote Desktop Gateway 2 Private IP Address"
                },
                "RDGWAdminPassword": {
                    "default": "Remote Desktop Gateway Admin Password"
                },
                "RDGWAdminUser": {
                    "default": "Remote Desktop Gateway Admin User Name"
                },
                "RDGWInboundCIDR": {
                    "default": "Remote Desktop Gateway Inbound CIDR"
                },
                "RDGWInstanceType": {
                    "default": "Remote Desktop Gateway Instance Type"
                },
                "RDSAllocatedStorage": {
                    "default": "RDS Allocated Storage"
                },
                "RDSDatabaseName": {
                    "default": "RDS Database Name"
                },
                "RDSDatabasePort": {
                    "default": "RDS Database Port"
                },
                "RDSInboundCIDR": {
                    "default": "RDS Inbound CIDR"
                },
                "RDSInstanceClass": {
                    "default": "RDS Instance Class"
                },
                "RDSInstanceIdentifier": {
                    "default": "RDS Instance Identifier"
                },
                "RDSMultiAZ": {
                    "default": "RDS MultiAZ"
                },
                "RDSPassword": {
                    "default": "RDS Password"
                },
                "RDSUsername": {
                    "default": "RDS Username"
                },
                "RedshiftDatabaseName": {
                    "default": "Redshift Database Name"
                },
                "RedshiftDatabasePort": {
                    "default": "Redshift Database Port"
                },
                "RedshiftInboundCIDR": {
                    "default": "Redshift Inbound CIDR"
                },
                "RedshiftNodeType": {
                    "default": "Redshift Node Type"
                },
                "RedshiftNumberOfNodes": {
                    "default": "Redshift Number of Nodes"
                },
                "RedshiftPassword": {
                    "default": "Redshift Password"
                },
                "RedshiftUsername": {
                    "default": "Redshift Username"
                },
                "RegCity": {
                    "default": "Reg City"
                },
                "RegCompany": {
                    "default": "Reg Company"
                },
                "RegCountry": {
                    "default": "Reg Country"
                },
                "RegDepartment": {
                    "default": "Reg Department"
                },
                "RegEmail": {
                    "default": "Reg Email"
                },
                "RegFirstName": {
                    "default": "Reg First Name"
                },
                "RegIndustry": {
                    "default": "Reg Industry"
                },
                "RegLastName": {
                    "default": "Reg Last Name"
                },
                "RegPhone": {
                    "default": "Reg Phone"
                },
                "RegState": {
                    "default": "Reg State"
                },
                "RegTitle": {
                    "default": "Reg Title"
                },
                "RegZip": {
                    "default": "Reg Zip"
                },
                "RootStackName": {
                    "default": "Stack Name"
                },
                "SqlWorkerInstanceType": {
                    "default": "SQL Worker Instance Type"
                },
                "TableauServerInboundCIDR": {
                    "default": "Tableau Server Inbound CIDR"
                },
                "TableauServerLicenseKey": {
                    "default": "Tableau Server License Key"
                },
                "VPCCIDR": {
                    "default": "Existing VPC CIDR"
                },
                "VPCID": {
                    "default": "Existing VPC ID"
                }
            }
        }
    },
    "Parameters": {
        "BastionAMIOS": {
            "AllowedValues": [
                "Amazon-Linux-HVM",
                "CentOS-7-HVM",
                "UbuntuServer-1404-LTS-HVM"
            ],
            "Default": "Amazon-Linux-HVM",
            "Description": "The Linux distribution for the AMI to be used for the bastion instances",
            "Type": "String"
        },
        "BastionBanner": {
            "Default": "https://s3.amazonaws.com/quickstart-reference/linux/bastion/latest/scripts/banner_message.txt",
            "Description": "Banner text to display upon login",
            "Type": "String"
        },
        "BastionInboundCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "Allowed CIDR block for external SSH access to the bastions",
            "Type": "String"
        },
        "BastionInstanceType": {
            "AllowedValues": [
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "t2.micro",
            "Description": "Amazon EC2 instance type for the bastion instances",
            "Type": "String"
        },
        "ContentAdminPassword": {
            "Description": "The password for the initial Admin user for Tableau server",
            "MinLength": "1",
            "NoEcho": "true",
            "Type": "String"
        },
        "ContentAdminUser": {
            "Default": "admin",
            "Description": "The name of the initial Admin user for Tableau server",
            "MinLength": "1",
            "Type": "String"
        },
        "DomainDNSName": {
            "AllowedPattern": "[a-zA-Z0-9]+\\..+",
            "Default": "example.com",
            "Description": "Fully qualified domain name (FQDN) e.g. example.com",
            "MaxLength": "25",
            "MinLength": "3",
            "Type": "String"
        },
        "HostedZoneName": {
            "Default": "<NONE>",
            "Description": "Name of Hosted Zone within which the Quick Start will create convenience DNS entries for AWS Resources created by the Quick Start.  If you do not wish to create convenience DNS entries or are not using AWS Route53 for DNS, enter '<NONE>', otherwise enter the Hosted Zone name including the trailing period, for example 'dev.example.com.'.",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Name of existing EC2 public/private key pair, which allows you to connect securely to instances deployed with the Quick Start after they launch.  When you created an AWS account, this is the key pair you created in your preferred region.  Enter the name of the keypair.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "PrivateSubnet1ID": {
            "Description": "ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet2ID": {
            "Description": "ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet1ID": {
            "Description": "ID of the public subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet2ID": {
            "Description": "ID of the public subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-development-ianhill",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
            "Default": "tableau/awsdata/latest",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
            "Type": "String"
        },
        "RDGW1NetBIOSName": {
            "AllowedPattern": "[a-zA-Z0-9]+",
            "Default": "RDGW1",
            "Description": "NetBIOS name of the first Remote Desktop Gateway (up to 15 characters)",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "RDGW1PrivateIP": {
            "Default": "10.0.128.11",
            "Description": "Fixed private IP for the first Remote Desktop Gateway located in Availability Zone 1",
            "Type": "String"
        },
        "RDGW2NetBIOSName": {
            "AllowedPattern": "[a-zA-Z0-9]+",
            "Default": "RDGW2",
            "Description": "NetBIOS name of the second Remote Desktop Gateway (up to 15 characters)",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "RDGW2PrivateIP": {
            "Default": "10.0.144.11",
            "Description": "Fixed private IP for the second Remote Desktop Gateway located in Availability Zone 2",
            "Type": "String"
        },
        "RDGWAdminPassword": {
            "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "Description": "Password for the administrative account. Must be at least 8 characters containing letters, numbers and symbols",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "RDGWAdminUser": {
            "AllowedPattern": "[a-zA-Z0-9]*",
            "Default": "admin",
            "Description": "User name for the new local administrator account",
            "MaxLength": "25",
            "MinLength": "5",
            "Type": "String"
        },
        "RDGWInboundCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$|<VPCCIDR>",
            "Description": "Allowed CIDR Block for external access to the Remote Desktop Gateways. Set to '<VPCCIDR>' to use the CIDR of the created VPC.",
            "Type": "String"
        },
        "RDGWInstanceType": {
            "AllowedValues": [
                "t2.large",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "t2.large",
            "Description": "Amazon EC2 instance type for the Remote Desktop Gateway instances",
            "Type": "String"
        },
        "RDSAllocatedStorage": {
            "ConstraintDescription": "must be between 5 and 1024Gb",
            "Default": "5",
            "Description": "The size of the database (Gb)",
            "MaxValue": "1024",
            "MinValue": "5",
            "Type": "Number"
        },
        "RDSDatabaseName": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default": "quickstart",
            "Description": "The name of the initial database created when the redshift cluster is provisioned",
            "MaxLength": "64",
            "MinLength": "1",
            "Type": "String"
        },
        "RDSDatabasePort": {
            "Default": "5432",
            "Description": "The port that the RDS instance will listen on and that will be allowed through the Security Group. ",
            "Type": "String"
        },
        "RDSInboundCIDR": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|<VPCCIDR>",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Default": "<VPCCIDR>",
            "Description": "Allow inbound traffic to RDS from this CIDR range.  Set to '<VPCCIDR>' to use the CIDR of the created VPC.",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "RDSInstanceClass": {
            "AllowedValues": [
                "db.m4.large",
                "db.m4.xlarge",
                "db.m4.2xlarge",
                "db.m4.4xlarge",
                "db.m4.10xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge",
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large"
            ],
            "ConstraintDescription": "Must be a valid RDS database instance type.",
            "Default": "db.t2.large",
            "Description": "Database instance class for the provisioned RDS instance.",
            "Type": "String"
        },
        "RDSInstanceIdentifier": {
            "Default": "quickstart-tableau-awsdata",
            "Description": "The identifier to use for the RDS instance",
            "Type": "String"
        },
        "RDSMultiAZ": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "true or false",
            "Default": "true",
            "Description": "When true, launch a multi availability zone RDS instance.",
            "Type": "String"
        },
        "RDSPassword": {
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters.",
            "Description": "The password associated with the admin account for the provisioned postgres RDS instance.",
            "MaxLength": "41",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "RDSUsername": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default": "postgres",
            "Description": "The user name associated with the admin account for the provisioned postgres RDS instance",
            "MaxLength": "16",
            "MinLength": "1",
            "NoEcho": "false",
            "Type": "String"
        },
        "RedshiftClusterSubnetID": {
            "Description": "SubnetId of an existing subnet in your Virtual Private Cloud (VPC), where Redshift Cluster will be launched",
            "Type": "String"
        },
        "RedshiftDatabaseName": {
            "AllowedPattern": "([a-z]|[0-9])+",
            "ConstraintDescription": "must contain a-z or 0-9 only.",
            "Default": "quickstart",
            "Description": "The name of the initial database created when the redshift cluster is provisioned",
            "Type": "String"
        },
        "RedshiftDatabasePort": {
            "Default": "5439",
            "Description": "The port that Redshift will listen on and that will be allowed through the Security Group. ",
            "Type": "String"
        },
        "RedshiftInboundCIDR": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|<VPCCIDR>",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Default": "<VPCCIDR>",
            "Description": "Allow inbound traffic to the cluster from this CIDR range.  Set to '<VPCCIDR>' to use the CIDR of the created VPC.",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "RedshiftNodeType": {
            "AllowedValues": [
                "dw1.xlarge",
                "dw1.8xlarge",
                "dw2.large",
                "dw2.8xlarge",
                "dc1.large",
                "dc1.8xlarge",
                "ds1.xlarge",
                "ds1.8xlarge",
                "ds2.xlarge",
                "ds2.8xlarge"
            ],
            "ConstraintDescription": "must be a valid RedShift node type.",
            "Default": "dc1.large",
            "Description": "The node type to be provisioned for the redshift cluster",
            "Type": "String"
        },
        "RedshiftNumberOfNodes": {
            "Default": "2",
            "Description": "The number of compute nodes in the redshift cluster.",
            "Type": "Number"
        },
        "RedshiftPassword": {
            "AllowedPattern": "[a-zA-Z0-9~`!#$%^&*()-_+={}|;:,.<>\\[\\]]*",
            "ConstraintDescription": "Between 8 and 64 chars in length; must contain at least one uppercase letter, one lowercase letter, and one number; can use any printable ASCII character (ASCII code 33 to 126) except ' (single quote), \" (double quote), \\, /, @, or space.",
            "Description": "The password associated with the master user account for the redshift cluster that is being created.",
            "MaxLength": "64",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "RedshiftUsername": {
            "AllowedPattern": "([a-z])([a-z]|[0-9])*",
            "ConstraintDescription": "must start with a-z and contain only a-z or 0-9.",
            "Default": "redshift",
            "Description": "The user name associated with the master user account for the redshift cluster that is being created",
            "Type": "String"
        },
        "RegCity": {
            "Description": "City",
            "Type": "String"
        },
        "RegCompany": {
            "Description": "Company",
            "Type": "String"
        },
        "RegCountry": {
            "Description": "Country",
            "Type": "String"
        },
        "RegDepartment": {
            "Description": "Department",
            "Type": "String"
        },
        "RegEmail": {
            "Description": "Email",
            "MinLength": "1",
            "Type": "String"
        },
        "RegFirstName": {
            "Description": "First Name",
            "MinLength": "1",
            "Type": "String"
        },
        "RegIndustry": {
            "Description": "Industry",
            "Type": "String"
        },
        "RegLastName": {
            "Description": "Last Name",
            "MinLength": "1",
            "Type": "String"
        },
        "RegPhone": {
            "Description": "Phone",
            "Type": "String"
        },
        "RegState": {
            "Description": "State",
            "Type": "String"
        },
        "RegTitle": {
            "Description": "Title",
            "Type": "String"
        },
        "RegZip": {
            "Description": "ZIP/Postal Code",
            "Type": "String"
        },
        "RootStackName": {
            "Default": "<NONE>",
            "Description": "Name of Top-Level Stack",
            "Type": "String"
        },
        "SqlWorkerInstanceType": {
            "AllowedValues": [
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "t2.micro",
            "Description": "Amazon EC2 instance type for the SQL Worker instance",
            "Type": "String"
        },
        "TableauServerInboundCIDR": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Description": "CIDR from which you may connect to web interface or bastion host (e.g., 1.1.1.1/32)",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "TableauServerLicenseKey": {
            "Default": "",
            "Description": "License Key (leave blank for trial)",
            "Type": "String"
        },
        "VPCCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.0.0/16",
            "Description": "CIDR block for the VPC",
            "Type": "String"
        },
        "VPCID": {
            "Description": "ID of the VPC (e.g., vpc-0343606e)",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Conditions": {
        "NoRDGWInboundCIDRCondition": {
            "Fn::Equals": [
                {
                    "Ref": "RDGWInboundCIDR"
                },
                "<VPCCIDR>"
            ]
        },
        "NoRedshiftInboundCIDRCondition": {
            "Fn::Equals": [
                {
                    "Ref": "RedshiftInboundCIDR"
                },
                "<VPCCIDR>"
            ]
        },
        "NoRDSInboundCIDRCondition": {
            "Fn::Equals": [
                {
                    "Ref": "RDSInboundCIDR"
                },
                "<VPCCIDR>"
            ]
        },
        "RedshiftSingleNodeClusterCondition": {
            "Fn::Equals": [
                {
                    "Ref": "RedshiftNumberOfNodes"
                },
                "1"
            ]
        },
        "HostedZoneIsSpecifiedCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "HostedZoneName"
                        },
                        "<NONE>"
                    ]
                }
            ]
        },
        "RootStackNameIsSpecifiedCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "RootStackName"
                        },
                        "<NONE>"
                    ]
                }
            ]
        }
    },
    "Mappings": {
        "AWSInfoRegionMap": {
            "ap-northeast-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-northeast-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-south-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-southeast-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-southeast-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ca-central-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "eu-central-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "eu-west-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "eu-west-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "sa-east-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-east-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-east-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-gov-west-1": {
                "Partition": "aws-us-gov",
                "QuickStartS3URL": "https://s3-us-gov-west-1.amazonaws.com"
            },
            "us-west-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-west-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            }
        }
    },
    "Resources": {
        "IAMRolesStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Join": [
                        "/",
                        [
                            {
                                "Fn::FindInMap": [
                                    "AWSInfoRegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "QuickStartS3URL"
                                ]
                            },
                            {
                                "Ref": "QSS3BucketName"
                            },
                            {
                                "Ref": "QSS3KeyPrefix"
                            },
                            "templates/iam-roles.template"
                        ]
                    ]
                },
                "Parameters": {
                    "S3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "S3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    }
                }
            }
        },
        "LinuxBastionStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Join": [
                        "/",
                        [
                            {
                                "Fn::FindInMap": [
                                    "AWSInfoRegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "QuickStartS3URL"
                                ]
                            },
                            {
                                "Ref": "QSS3BucketName"
                            },
                            {
                                "Ref": "QSS3KeyPrefix"
                            },
                            "submodules/quickstart-linux-bastion",
                            "templates/linux-bastion.template"
                        ]
                    ]
                },
                "Parameters": {
                    "BastionInstanceType": {
                        "Ref": "BastionInstanceType"
                    },
                    "BastionAMIOS": {
                        "Ref": "BastionAMIOS"
                    },
                    "BastionBanner": {
                        "Ref": "BastionBanner"
                    },
                    "EnableBanner": "true",
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "PublicSubnet1ID": {
                        "Ref": "PublicSubnet1ID"
                    },
                    "PublicSubnet2ID": {
                        "Ref": "PublicSubnet2ID"
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Ref": "QSS3KeyPrefix"
                                },
                                "submodules/quickstart-linux-bastion"
                            ]
                        ]
                    },
                    "RemoteAccessCIDR": {
                        "Ref": "BastionInboundCIDR"
                    },
                    "VPCID": {
                        "Ref": "VPCID"
                    }
                }
            }
        },
        "RDGWStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Join": [
                        "/",
                        [
                            {
                                "Fn::FindInMap": [
                                    "AWSInfoRegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "QuickStartS3URL"
                                ]
                            },
                            {
                                "Ref": "QSS3BucketName"
                            },
                            {
                                "Ref": "QSS3KeyPrefix"
                            },
                            "submodules/quickstart-microsoft-rdgateway",
                            "templates/rdgw-standalone.template"
                        ]
                    ]
                },
                "Parameters": {
                    "AdminPassword": {
                        "Ref": "RDGWAdminPassword"
                    },
                    "AdminUser": {
                        "Ref": "RDGWAdminUser"
                    },
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "DomainDNSName": {
                        "Ref": "DomainDNSName"
                    },
                    "PublicSubnet1ID": {
                        "Ref": "PublicSubnet1ID"
                    },
                    "PublicSubnet2ID": {
                        "Ref": "PublicSubnet2ID"
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Ref": "QSS3KeyPrefix"
                                },
                                "submodules/quickstart-microsoft-rdgateway"
                            ]
                        ]
                    },
                    "RDGW1InstanceType": {
                        "Ref": "RDGWInstanceType"
                    },
                    "RDGW1NetBIOSName": {
                        "Ref": "RDGW1NetBIOSName"
                    },
                    "RDGW1PrivateIP": {
                        "Ref": "RDGW1PrivateIP"
                    },
                    "RDGW2InstanceType": {
                        "Ref": "RDGWInstanceType"
                    },
                    "RDGW2NetBIOSName": {
                        "Ref": "RDGW2NetBIOSName"
                    },
                    "RDGW2PrivateIP": {
                        "Ref": "RDGW2PrivateIP"
                    },
                    "RDGWCIDR": {
                        "Fn::If": [
                            "NoRDGWInboundCIDRCondition",
                            {
                                "Ref": "VPCCIDR"
                            },
                            {
                                "Ref": "RDGWInboundCIDR"
                            }
                        ]
                    },
                    "VPCID": {
                        "Ref": "VPCID"
                    }
                }
            }
        },
        "RedshiftClusterStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Join": [
                        "/",
                        [
                            {
                                "Fn::FindInMap": [
                                    "AWSInfoRegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "QuickStartS3URL"
                                ]
                            },
                            {
                                "Ref": "QSS3BucketName"
                            },
                            {
                                "Ref": "QSS3KeyPrefix"
                            },
                            "templates/redshift-cluster.template"
                        ]
                    ]
                },
                "Parameters": {
                    "VPC": {
                        "Ref": "VPCID"
                    },
                    "ClusterSubnetID": {
                        "Ref": "PrivateSubnet1ID"
                    },
                    "DatabaseName": {
                        "Ref": "RedshiftDatabaseName"
                    },
                    "ClusterType": {
                        "Fn::If": [
                            "RedshiftSingleNodeClusterCondition",
                            "single-node",
                            "multi-node"
                        ]
                    },
                    "NumberOfNodes": {
                        "Ref": "RedshiftNumberOfNodes"
                    },
                    "NodeType": {
                        "Ref": "RedshiftNodeType"
                    },
                    "MasterUsername": {
                        "Ref": "RedshiftUsername"
                    },
                    "MasterUserPassword": {
                        "Ref": "RedshiftPassword"
                    },
                    "InboundTraffic": {
                        "Fn::If": [
                            "NoRedshiftInboundCIDRCondition",
                            {
                                "Ref": "VPCCIDR"
                            },
                            {
                                "Ref": "RedshiftInboundCIDR"
                            }
                        ]
                    },
                    "DatabasePort": {
                        "Ref": "RedshiftDatabasePort"
                    }
                }
            }
        },
        "RDSInstanceStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Join": [
                        "/",
                        [
                            {
                                "Fn::FindInMap": [
                                    "AWSInfoRegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "QuickStartS3URL"
                                ]
                            },
                            {
                                "Ref": "QSS3BucketName"
                            },
                            {
                                "Ref": "QSS3KeyPrefix"
                            },
                            "templates/rds-instance.template"
                        ]
                    ]
                },
                "Parameters": {
                    "VpcId": {
                        "Ref": "VPCID"
                    },
                    "Subnets": {
                        "Fn::Join": [
                            ",",
                            [
                                {
                                    "Ref": "PrivateSubnet1ID"
                                },
                                {
                                    "Ref": "PrivateSubnet2ID"
                                }
                            ]
                        ]
                    },
                    "DBIdentifier": {
                        "Ref": "RDSInstanceIdentifier"
                    },
                    "DatabasePort": {
                        "Ref": "RDSDatabasePort"
                    },
                    "DBName": {
                        "Ref": "RDSDatabaseName"
                    },
                    "DBUser": {
                        "Ref": "RDSUsername"
                    },
                    "DBPassword": {
                        "Ref": "RDSPassword"
                    },
                    "InboundTraffic": {
                        "Fn::If": [
                            "NoRDSInboundCIDRCondition",
                            {
                                "Ref": "VPCCIDR"
                            },
                            {
                                "Ref": "RedshiftInboundCIDR"
                            }
                        ]
                    },
                    "DBAllocatedStorage": {
                        "Ref": "RDSAllocatedStorage"
                    },
                    "DBInstanceClass": {
                        "Ref": "RDSInstanceClass"
                    },
                    "MultiAZDatabase": {
                        "Ref": "RDSMultiAZ"
                    }
                }
            }
        },
        "SQLWorkerStack": {
            "Type": "AWS::CloudFormation::Stack",
            "DependsOn": [
                "RedshiftClusterStack",
                "RDSInstanceStack"
            ],
            "Properties": {
                "TemplateURL": {
                    "Fn::Join": [
                        "/",
                        [
                            {
                                "Fn::FindInMap": [
                                    "AWSInfoRegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "QuickStartS3URL"
                                ]
                            },
                            {
                                "Ref": "QSS3BucketName"
                            },
                            {
                                "Ref": "QSS3KeyPrefix"
                            },
                            "templates/sql-worker.template"
                        ]
                    ]
                },
                "Parameters": {
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "InstanceType": {
                        "Ref": "SqlWorkerInstanceType"
                    },
                    "RedshiftClusterId": {
                        "Fn::GetAtt": [
                            "RedshiftClusterStack",
                            "Outputs.RedshiftClusterId"
                        ]
                    },
                    "RedshiftHost": {
                        "Fn::GetAtt": [
                            "RedshiftClusterStack",
                            "Outputs.RedshiftHost"
                        ]
                    },
                    "RDSHost": {
                        "Fn::GetAtt": [
                            "RDSInstanceStack",
                            "Outputs.DBAddress"
                        ]
                    },
                    "RDSDBName": {
                        "Fn::GetAtt": [
                            "RDSInstanceStack",
                            "Outputs.DBName"
                        ]
                    },
                    "RedshiftDBName": {
                        "Fn::GetAtt": [
                            "RedshiftClusterStack",
                            "Outputs.RedshiftDatabaseName"
                        ]
                    },
                    "RedshiftDatabasePort": {
                        "Fn::GetAtt": [
                            "RedshiftClusterStack",
                            "Outputs.RedshiftPort"
                        ]
                    },
                    "RDSDatabasePort": {
                        "Fn::GetAtt": [
                            "RDSInstanceStack",
                            "Outputs.Port"
                        ]
                    },
                    "RedshiftUsername": {
                        "Fn::GetAtt": [
                            "RedshiftClusterStack",
                            "Outputs.RedshiftUsername"
                        ]
                    },
                    "RDSUsername": {
                        "Fn::GetAtt": [
                            "RDSInstanceStack",
                            "Outputs.DBUser"
                        ]
                    },
                    "RedshiftPassword": {
                        "Fn::GetAtt": [
                            "RedshiftClusterStack",
                            "Outputs.RedshiftPassword"
                        ]
                    },
                    "RDSPassword": {
                        "Fn::GetAtt": [
                            "RDSInstanceStack",
                            "Outputs.DBPassword"
                        ]
                    },
                    "IamInstanceProfile": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.InstanceProfileEc2Worker"
                        ]
                    },
                    "IAMRoleEc2Worker": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.IAMRoleEc2Worker"
                        ]
                    },
                    "IAMRoleEc2WorkerArn": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.IAMRoleEc2WorkerArn"
                        ]
                    },
                    "IAMRoleRedshiftWorker": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.IAMRoleRedshiftWorker"
                        ]
                    },
                    "IAMRoleRedshiftWorkerArn": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.IAMRoleRedshiftWorkerArn"
                        ]
                    },
                    "SubnetId": {
                        "Ref": "PrivateSubnet1ID"
                    },
                    "VpcId": {
                        "Ref": "VPCID"
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "QuickStartS3URL": {
                        "Fn::FindInMap": [
                            "AWSInfoRegionMap",
                            {
                                "Ref": "AWS::Region"
                            },
                            "QuickStartS3URL"
                        ]
                    }
                }
            }
        },
        "TableauServerStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Join": [
                        "/",
                        [
                            {
                                "Fn::FindInMap": [
                                    "AWSInfoRegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "QuickStartS3URL"
                                ]
                            },
                            {
                                "Ref": "QSS3BucketName"
                            },
                            {
                                "Ref": "QSS3KeyPrefix"
                            },
                            "templates/tableau-server-single-server.template"
                        ]
                    ]
                },
                "Parameters": {
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "ContentAdminUser": {
                        "Ref": "ContentAdminUser"
                    },
                    "ContentAdminPassword": {
                        "Ref": "ContentAdminPassword"
                    },
                    "RegFirstName": {
                        "Ref": "RegFirstName"
                    },
                    "RegLastName": {
                        "Ref": "RegLastName"
                    },
                    "RegEmail": {
                        "Ref": "RegEmail"
                    },
                    "RegCompany": {
                        "Ref": "RegCompany"
                    },
                    "RegTitle": {
                        "Ref": "RegTitle"
                    },
                    "RegDepartment": {
                        "Ref": "RegDepartment"
                    },
                    "RegIndustry": {
                        "Ref": "RegIndustry"
                    },
                    "RegPhone": {
                        "Ref": "RegPhone"
                    },
                    "RegCity": {
                        "Ref": "RegCity"
                    },
                    "RegState": {
                        "Ref": "RegState"
                    },
                    "RegZip": {
                        "Ref": "RegZip"
                    },
                    "RegCountry": {
                        "Ref": "RegCountry"
                    },
                    "TableauServerLicenseKey": {
                        "Ref": "TableauServerLicenseKey"
                    },
                    "IamInstanceProfile": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.InstanceProfileEc2Worker"
                        ]
                    },
                    "IAMRoleEc2Worker": {
                        "Fn::GetAtt": [
                            "IAMRolesStack",
                            "Outputs.IAMRoleEc2Worker"
                        ]
                    },
                    "VpcId": {
                        "Ref": "VPCID"
                    },
                    "SubnetID": {
                        "Ref": "PublicSubnet1ID"
                    },
                    "RedshiftHost": {
                        "Fn::GetAtt": [
                            "RedshiftClusterStack",
                            "Outputs.RedshiftHost"
                        ]
                    },
                    "RedshiftDatabasePort": {
                        "Fn::GetAtt": [
                            "RedshiftClusterStack",
                            "Outputs.RedshiftPort"
                        ]
                    },
                    "RedshiftUsername": {
                        "Ref": "RedshiftUsername"
                    },
                    "RedshiftPassword": {
                        "Ref": "RedshiftPassword"
                    },
                    "RedshiftDatabaseName": {
                        "Ref": "RedshiftDatabaseName"
                    },
                    "RDSHost": {
                        "Fn::GetAtt": [
                            "RDSInstanceStack",
                            "Outputs.DBAddress"
                        ]
                    },
                    "RDSDatabasePort": {
                        "Fn::GetAtt": [
                            "RDSInstanceStack",
                            "Outputs.DBPort"
                        ]
                    },
                    "RDSUsername": {
                        "Ref": "RDSUsername"
                    },
                    "RDSPassword": {
                        "Ref": "RDSPassword"
                    },
                    "RDSDatabaseName": {
                        "Ref": "RDSDatabaseName"
                    }
                }
            }
        },
        "DnsRecordSetStack": {
            "Type": "AWS::CloudFormation::Stack",
            "DependsOn": [
                "LinuxBastionStack",
                "RDGWStack",
                "RedshiftClusterStack",
                "RDSInstanceStack",
                "SQLWorkerStack",
                "TableauServerStack"
            ],
            "Condition": "HostedZoneIsSpecifiedCondition",
            "Properties": {
                "TemplateURL": {
                    "Fn::Join": [
                        "/",
                        [
                            {
                                "Fn::FindInMap": [
                                    "AWSInfoRegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "QuickStartS3URL"
                                ]
                            },
                            {
                                "Ref": "QSS3BucketName"
                            },
                            {
                                "Ref": "QSS3KeyPrefix"
                            },
                            "templates/route53-recordsets.template"
                        ]
                    ]
                },
                "Parameters": {
                    "RootStackName": {
                        "Fn::If": [
                            "RootStackNameIsSpecifiedCondition",
                            {
                                "Ref": "RootStackName"
                            },
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    },
                    "HostedZoneName": {
                        "Ref": "HostedZoneName"
                    },
                    "BastionEIP": {
                        "Fn::GetAtt": [
                            "LinuxBastionStack",
                            "Outputs.EIP1"
                        ]
                    },
                    "RDGW1PublicIP": {
                        "Fn::GetAtt": [
                            "RDGWStack",
                            "Outputs.RDGW1ElasticIP"
                        ]
                    },
                    "RDGW2PublicIP": {
                        "Fn::GetAtt": [
                            "RDGWStack",
                            "Outputs.RDGW2ElasticIP"
                        ]
                    },
                    "TableauServerPublicDnsName": {
                        "Fn::GetAtt": [
                            "TableauServerStack",
                            "Outputs.PublicDnsName"
                        ]
                    },
                    "TableauServerPrivateDnsName": {
                        "Fn::GetAtt": [
                            "TableauServerStack",
                            "Outputs.PrivateDnsName"
                        ]
                    },
                    "SqlWorkerPrivateDnsName": {
                        "Fn::GetAtt": [
                            "SQLWorkerStack",
                            "Outputs.PrivateDnsName"
                        ]
                    },
                    "RedshiftPrivateDnsName": {
                        "Fn::GetAtt": [
                            "RedshiftClusterStack",
                            "Outputs.RedshiftHost"
                        ]
                    },
                    "RDSPrivateDnsName": {
                        "Fn::GetAtt": [
                            "RDSInstanceStack",
                            "Outputs.DBAddress"
                        ]
                    }
                }
            }
        }
    },
    "Outputs": {
        "TableauServerURL": {
            "Description": "URL through which Tableau Server can be accessed.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::If": [
                                "HostedZoneIsSpecifiedCondition",
                                {
                                    "Fn::GetAtt": [
                                        "DnsRecordSetStack",
                                        "Outputs.TableauServerPublicName"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "TableauServerStack",
                                        "Outputs.PublicDnsName"
                                    ]
                                }
                            ]
                        },
                        ":",
                        {
                            "Fn::GetAtt": [
                                "TableauServerStack",
                                "Outputs.PublicGatewayPort"
                            ]
                        },
                        "/"
                    ]
                ]
            }
        },
        "BastionPublicName": {
            "Description": "Convenient Name for Bastion Public Access",
            "Value": {
                "Fn::If": [
                    "HostedZoneIsSpecifiedCondition",
                    {
                        "Fn::GetAtt": [
                            "DnsRecordSetStack",
                            "Outputs.BastionPublicName"
                        ]
                    },
                    {
                        "Fn::GetAtt": [
                            "LinuxBastionStack",
                            "Outputs.EIP1"
                        ]
                    }
                ]
            }
        },
        "RDGW1PublicName": {
            "Description": "Convenient Name for RDGW1 Public Access",
            "Value": {
                "Fn::If": [
                    "HostedZoneIsSpecifiedCondition",
                    {
                        "Fn::GetAtt": [
                            "DnsRecordSetStack",
                            "Outputs.RDGW1PublicName"
                        ]
                    },
                    {
                        "Fn::GetAtt": [
                            "RDGWStack",
                            "Outputs.RDGW1ElasticIP"
                        ]
                    }
                ]
            }
        },
        "RDGW2PublicName": {
            "Description": "Convenient Name for RDGW2 Public Access",
            "Value": {
                "Fn::If": [
                    "HostedZoneIsSpecifiedCondition",
                    {
                        "Fn::GetAtt": [
                            "DnsRecordSetStack",
                            "Outputs.RDGW2PublicName"
                        ]
                    },
                    {
                        "Fn::GetAtt": [
                            "RDGWStack",
                            "Outputs.RDGW2ElasticIP"
                        ]
                    }
                ]
            }
        },
        "TableauServerPublicName": {
            "Description": "Convenient Name for TableauServer Public Access",
            "Value": {
                "Fn::If": [
                    "HostedZoneIsSpecifiedCondition",
                    {
                        "Fn::GetAtt": [
                            "DnsRecordSetStack",
                            "Outputs.TableauServerPublicName"
                        ]
                    },
                    {
                        "Fn::GetAtt": [
                            "TableauServerStack",
                            "Outputs.PublicDnsName"
                        ]
                    }
                ]
            }
        },
        "TableauServerPrivateName": {
            "Description": "Convenient Name for TableauServer Private Access",
            "Value": {
                "Fn::If": [
                    "HostedZoneIsSpecifiedCondition",
                    {
                        "Fn::GetAtt": [
                            "DnsRecordSetStack",
                            "Outputs.TableauServerPrivateName"
                        ]
                    },
                    {
                        "Fn::GetAtt": [
                            "TableauServerStack",
                            "Outputs.PrivateDnsName"
                        ]
                    }
                ]
            }
        },
        "SqlWorkerPrivateName": {
            "Description": "Convenient Name for SQL Worker Private Access",
            "Value": {
                "Fn::If": [
                    "HostedZoneIsSpecifiedCondition",
                    {
                        "Fn::GetAtt": [
                            "DnsRecordSetStack",
                            "Outputs.SqlWorkerPrivateName"
                        ]
                    },
                    {
                        "Fn::GetAtt": [
                            "SQLWorkerStack",
                            "Outputs.PrivateDnsName"
                        ]
                    }
                ]
            }
        },
        "RedshiftPrivateName": {
            "Description": "Convenient Name for Redshift Private Access",
            "Value": {
                "Fn::If": [
                    "HostedZoneIsSpecifiedCondition",
                    {
                        "Fn::GetAtt": [
                            "DnsRecordSetStack",
                            "Outputs.RedshiftPrivateName"
                        ]
                    },
                    {
                        "Fn::GetAtt": [
                            "RedshiftClusterStack",
                            "Outputs.RedshiftHost"
                        ]
                    }
                ]
            }
        },
        "RDSPrivateName": {
            "Description": "Convenient Name for Postgres RDS Private Access",
            "Value": {
                "Fn::If": [
                    "HostedZoneIsSpecifiedCondition",
                    {
                        "Fn::GetAtt": [
                            "DnsRecordSetStack",
                            "Outputs.RDSPrivateName"
                        ]
                    },
                    {
                        "Fn::GetAtt": [
                            "RDSInstanceStack",
                            "Outputs.DBAddress"
                        ]
                    }
                ]
            }
        }
    }
}