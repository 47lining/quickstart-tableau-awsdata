{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Tableau AWS Data is a QuickStart that provides an integrated deployment of Tableau Server, Redshift cluster, RDS Postgress cluster in the same VPC through Cloudformation templates that provision and configure the required resources, including related QuickStarts. This master template provisions a new VPC, Linux Bastions, and Remote Desktop Gateways by leveraging existing Quick Starts.  Within the new VPC, it creates an Amazon EC2 Windows instance and related resources for Tableau Server. It also creates an Amazon EC2 Linux instance for SQL script execution, Amazon Redshift cluster a high-availability postgres RDS instance and IAM Roles required for EC2 and Redshift access to data in S3. You will be billed for the AWS resources used if you create a stack from this template.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "KeyPairName",
                        "QSS3BucketName",
                        "QSS3KeyPrefix",
                        "HostedZoneName"
                    ]
                },
                {
                    "Label": {
                        "default": "Required Parameters"
                    },
                    "Parameters": [
                        "AvailabilityZones",
                        "BastionInboundCIDR",
                        "RDGWInboundCIDR",
                        "TableauServerInboundCIDR",
                        "RDGWAdminPassword",
                        "RedshiftPassword",
                        "RDSPassword",
                        "ContentAdminPassword",
                        "RegFirstName",
                        "RegLastName",
                        "RegEmail",
                        "RegCompany",
                        "RegTitle",
                        "RegDepartment",
                        "RegIndustry",
                        "RegPhone",
                        "RegCity",
                        "RegState",
                        "RegZip",
                        "RegCountry"
                    ]
                },
                {
                    "Label": {
                        "default": "New VPC Configuration"
                    },
                    "Parameters": [
                        "VPCDefinition"
                    ]
                },
                {
                    "Label": {
                        "default": "Linux Bastion Configuration"
                    },
                    "Parameters": [
                        "BastionAMIOS",
                        "BastionInstanceType",
                        "Bastion1PrivateIP",
                        "Bastion2PrivateIP",
                        "BastionBanner"
                    ]
                },
                {
                    "Label": {
                        "default": "Remote Desktop Gateway Configuration"
                    },
                    "Parameters": [
                        "RDGWAdminUser",
                        "DomainDNSName",
                        "RDGWInstanceType",
                        "RDGW1NetBIOSName",
                        "RDGW1PrivateIP",
                        "RDGW2NetBIOSName",
                        "RDGW2PrivateIP"
                    ]
                },
                {
                    "Label": {
                        "default": "Redshift Cluster Configuration"
                    },
                    "Parameters": [
                        "RedshiftDatabaseName",
                        "RedshiftNumberOfNodes",
                        "RedshiftNodeType",
                        "RedshiftUsername",
                        "RedshiftInboundCIDR",
                        "RedshiftDatabasePort"
                    ]
                },
                {
                    "Label": {
                        "default": "Postgress RDS Instance Configuration"
                    },
                    "Parameters": [
                        "RDSInstanceIdentifier",
                        "RDSDatabasePort",
                        "RDSDatabaseName",
                        "RDSMultiAZ",
                        "RDSInstanceClass",
                        "RDSAllocatedStorage",
                        "RDSUsername",
                        "RDSInboundCIDR"
                    ]
                },
                {
                    "Label": {
                        "default": "SQL-Worker EC2 Instance Configuration"
                    },
                    "Parameters": [
                        "SqlWorkerInstanceType"
                    ]
                },
                {
                    "Label": {
                        "default": "Tableau Server EC2 Instance Configuration"
                    },
                    "Parameters": [
                        "ContentAdminUser",
                        "TableauServerLicenseKey"
                    ]
                }
            ],
            "ParameterLabels": {
                "KeyPairName": {
                    "default": "Key pair name"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "HostedZoneName": {
                    "default": "Hosted Zone Name"
                },
                "AvailabilityZones": {
                    "default": "Availability Zones"
                },
                "VPCDefinition": {
                    "default": "VPC Definition"
                },
                "BastionInstanceType": {
                    "default": "Bastion Instance Type"
                },
                "Bastion1PrivateIP": {
                    "default": "Bastion 1 Private IP Address"
                },
                "Bastion2PrivateIP": {
                    "default": "Bastion 2 Private IP Address"
                },
                "BastionAMIOS": {
                    "default": "Bastion AMI Operating System"
                },
                "BastionBanner": {
                    "default": "Bastion Banner"
                },
                "BastionInboundCIDR": {
                    "default": "Bastion Inbound CIDR"
                },
                "RDGWAdminPassword": {
                    "default": "Remote Desktop Gateway Admin Password"
                },
                "RDGWAdminUser": {
                    "default": "Remote Desktop Gateway Admin User Name"
                },
                "DomainDNSName": {
                    "default": "Domain DNS Name"
                },
                "RDGWInstanceType": {
                    "default": "Remote Desktop Gateway 1 Instance Type"
                },
                "RDGW1NetBIOSName": {
                    "default": "Remote Desktop Gateway 1 NetBIOS Name"
                },
                "RDGW1PrivateIP": {
                    "default": "Remote Desktop Gateway 1 Private IP Address"
                },
                "RDGW2NetBIOSName": {
                    "default": "Remote Desktop Gateway 2 NetBIOS Name"
                },
                "RDGW2PrivateIP": {
                    "default": "Remote Desktop Gateway 2 Private IP Address"
                },
                "RDGWInboundCIDR": {
                    "default": "Remote Desktop Gateway Inbound CIDR"
                },
                "RedshiftDatabasePort": {
                    "default": "Redshift Database Port"
                },
                "RedshiftDatabaseName": {
                    "default": "Redshift Database Name"
                },
                "RedshiftNumberOfNodes": {
                    "default": "Redshift Number of Nodes"
                },
                "RedshiftNodeType": {
                    "default": "Redshift Node Type"
                },
                "RedshiftUsername": {
                    "default": "Redshift Username"
                },
                "RedshiftPassword": {
                    "default": "Redshift Password"
                },
                "RedshiftInboundCIDR": {
                    "default": "Redshift Inbound CIDR"
                },
                "RDSInstanceIdentifier": {
                    "default": "RDS Instance Identifier"
                },
                "RDSDatabasePort": {
                    "default": "RDS Database Port"
                },
                "RDSDatabaseName": {
                    "default": "RDS Database Name"
                },
                "RDSMultiAZ": {
                    "default": "RDS MultiAZ"
                },
                "RDSInstanceClass": {
                    "default": "RDS Instance Class"
                },
                "RDSAllocatedStorage": {
                    "default": "RDS Allocated Storage"
                },
                "RDSUsername": {
                    "default": "RDS Username"
                },
                "RDSPassword": {
                    "default": "RDS Password"
                },
                "RDSInboundCIDR": {
                    "default": "RDS Inbound CIDR"
                },
                "SqlWorkerInstanceType": {
                    "default": "SQL Worker Instance Type"
                },
                "TableauServerInboundCIDR": {
                    "default": "Tableau Server Inbound CIDR"
                },
                "ContentAdminUser": {
                    "default": "Content Admin User"
                },
                "ContentAdminPassword": {
                    "default": "Content Admin Password"
                },
                "TableauServerLicenseKey": {
                    "default": "Tableau Server License Key"
                },
                "RegFirstName": {
                    "default": "Reg First Name"
                },
                "RegLastName": {
                    "default": "Reg Last Name"
                },
                "RegEmail": {
                    "default": "Reg Email"
                },
                "RegCompany": {
                    "default": "Reg Company"
                },
                "RegTitle": {
                    "default": "Reg Title"
                },
                "RegDepartment": {
                    "default": "Reg Department"
                },
                "RegIndustry": {
                    "default": "Reg Industry"
                },
                "RegPhone": {
                    "default": "Reg Phone"
                },
                "RegCity": {
                    "default": "Reg City"
                },
                "RegState": {
                    "default": "Reg State"
                },
                "RegZip": {
                    "default": "Reg Zip"
                },
                "RegCountry": {
                    "default": "Reg Country"
                }
            }
        }
    },
    "Parameters": {
        "KeyPairName": {
            "Description": "Amazon EC2 Key Pair",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
            "Default": "tableau/awsdata/latest",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
            "Type": "String"
        },
        "HostedZoneName": {
            "Default": "<NONE>",
            "Description": "Name of Hosted Zone within which the Quick Start will create convenience DNS entries for AWS Resources created by the Quick Start.  If you do not wish to create convenience DNS entries or are not using AWS Route53 for DNS, enter '<NONE>', otherwise enter the Hosted Zone name including the trailing period, for example 'dev.example.com.'.",
            "Type": "String"
        },
        "AvailabilityZones": {
            "Description": "List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved.",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>"
        },
        "VPCDefinition": {
            "Description": "VPC Definition name from Map maintained in this Quick Start's master template.  You can support multiple VPC Definitions by extending this Map and choosing the appropriate name.  If you do not need to change the VPC Definition, simply choose the default.",
            "Type": "String",
            "Default": "QuickstartDefault"
        },
        "BastionInstanceType": {
            "AllowedValues": [
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "t2.micro",
            "Description": "Amazon EC2 instance type for the bastion instances",
            "Type": "String"
        },
        "Bastion1PrivateIP": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "ConstraintDescription": "IP address parameter must be in the form x.x.x.x",
            "Default": "10.0.128.5",
            "Description": "Fixed private IP for the first bastion located in Availability Zone 1",
            "Type": "String"
        },
        "Bastion2PrivateIP": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "ConstraintDescription": "IP address parameter must be in the form x.x.x.x",
            "Default": "10.0.144.5",
            "Description": "Fixed private IP for the second bastion located in Availability Zone 2",
            "Type": "String"
        },
        "BastionAMIOS": {
            "AllowedValues": [
                "AmazonLinuxHVM",
                "CentOS7HVM",
                "UbuntuServer1404LTSHVM"
            ],
            "Default": "AmazonLinuxHVM",
            "Description": "The Linux distribution for the AMI to be used for the bastion instances",
            "Type": "String"
        },
        "BastionBanner": {
            "Default": "https://s3.amazonaws.com/quickstart-reference/linux/bastion/latest/scripts/banner_message.txt",
            "Description": "Banner text to display upon login",
            "Type": "String"
        },
        "BastionInboundCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "Allowed CIDR block for external SSH access to the bastions",
            "Type": "String"
        },
        "RDGWAdminPassword": {
            "Description": "Password for the administrative account. Must be at least 8 characters containing letters, numbers and symbols",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "32",
            "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "NoEcho": "true"
        },
        "RDGWAdminUser": {
            "Description": "User name for the new local administrator account",
            "Type": "String",
            "Default": "admin",
            "MinLength": "5",
            "MaxLength": "25",
            "AllowedPattern": "[a-zA-Z0-9]*"
        },
        "DomainDNSName": {
            "Description": "Fully qualified domain name (FQDN) e.g. example.com",
            "Type": "String",
            "Default": "example.com",
            "MinLength": "3",
            "MaxLength": "25",
            "AllowedPattern": "[a-zA-Z0-9]+\\..+"
        },
        "RDGWInstanceType": {
            "Description": "Amazon EC2 instance type for the first Remote Desktop Gateway instance",
            "Type": "String",
            "Default": "t2.large",
            "AllowedValues": [
                "t2.large",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ]
        },
        "RDGW1NetBIOSName": {
            "Description": "NetBIOS name of the first Remote Desktop Gateway (up to 15 characters)",
            "Type": "String",
            "Default": "RDGW1",
            "MinLength": "1",
            "MaxLength": "15",
            "AllowedPattern": "[a-zA-Z0-9]+"
        },
        "RDGW1PrivateIP": {
            "Description": "Fixed private IP for the first Remote Desktop Gateway located in Availability Zone 1",
            "Type": "String",
            "Default": "10.0.128.11"
        },
        "RDGW2NetBIOSName": {
            "Description": "NetBIOS name of the second Remote Desktop Gateway (up to 15 characters)",
            "Type": "String",
            "Default": "RDGW2",
            "MinLength": "1",
            "MaxLength": "15",
            "AllowedPattern": "[a-zA-Z0-9]+"
        },
        "RDGW2PrivateIP": {
            "Description": "Fixed private IP for the second Remote Desktop Gateway located in Availability Zone 2",
            "Type": "String",
            "Default": "10.0.144.11"
        },
        "RDGWInboundCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$|<VPCCIDR>",
            "Description": "Allowed CIDR Block for external access to the Remote Desktop Gateways. Set to '<VPCCIDR>' to use the CIDR of the created VPC.",
            "Type": "String"
        },
        "SqlWorkerInstanceType": {
            "AllowedValues": [
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "t2.micro",
            "Description": "Amazon EC2 instance type for the SQL Worker instance",
            "Type": "String"
        },
        "RedshiftDatabaseName": {
            "Description": "The name of the first database to be created when the redshift cluster is created",
            "Type": "String",
            "Default": "quickstart",
            "AllowedPattern": "([a-z]|[0-9])+",
            "ConstraintDescription": "must contain a-z or 0-9 only."
        },
        "RedshiftNumberOfNodes": {
            "Description": "The number of compute nodes in the redshift cluster.  When cluster type is specified as single-node, the NumberOfNodes parameter should be specified as 1.  When cluster type is specified as multi-node, the NumberOfNodes parameter should be greater than 1",
            "Type": "Number",
            "Default": "2"
        },
        "RedshiftNodeType": {
            "Description": "The node type to be provisioned for the redshift cluster",
            "Type": "String",
            "Default": "dc1.large",
            "AllowedValues": [
                "dw1.xlarge",
                "dw1.8xlarge",
                "dw2.large",
                "dw2.8xlarge",
                "dc1.large",
                "dc1.8xlarge",
                "ds1.xlarge",
                "ds1.8xlarge",
                "ds2.xlarge",
                "ds2.8xlarge"
            ],
            "ConstraintDescription": "must be a valid RedShift node type."
        },
        "RedshiftUsername": {
            "Description": "The user name associated with the master user account for the redshift cluster that is being created",
            "Type": "String",
            "Default": "redshift",
            "AllowedPattern": "([a-z])([a-z]|[0-9])*",
            "ConstraintDescription": "must start with a-z and contain only a-z or 0-9."
        },
        "RedshiftPassword": {
            "Description": "The password associated with the master user account for the redshift cluster that is being created. ",
            "Type": "String",
            "NoEcho": "true",
            "MinLength": "8",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z0-9~`!#$%^&*()-_+={}|;:,.<>\\[\\]]*",
            "ConstraintDescription": "Between 8 and 64 chars in length; must contain at least one uppercase letter, one lowercase letter, and one number; can use any printable ASCII character (ASCII code 33 to 126) except ' (single quote), \" (double quote), \\, /, @, or space."
        },
        "RedshiftInboundCIDR": {
            "Description": "Allow inbound traffic to the cluster from this CIDR range.  Set to '<VPCCIDR>' to use the CIDR of the created VPC.",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|<VPCCIDR>",
            "Default": "<VPCCIDR>",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
        },
        "RedshiftDatabasePort": {
            "Description": "The port that Redshift will listen on and that will be allowed through the Security Group. ",
            "Type": "String",
            "Default": "5439"
        },
        "RDSInstanceIdentifier": {
            "Type": "String",
            "Description": "The identifier to use for the RDS instance",
            "Default": "quickstart-tableau-awsdata"
        },
        "RDSDatabasePort": {
            "Description": "The port that the RDS instance will listen on and that will be allowed through the Security Group. ",
            "Type": "String",
            "Default": "5432"
        },
        "RDSDatabaseName": {
            "Default": "quickstart",
            "Description": "The name of the initial database created when the redshift cluster is provisioned",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "RDSMultiAZ": {
            "Default": "true",
            "Description": "When true, launch a multi availability zone RDS instance.",
            "Type": "String",
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "true or false"
        },
        "RDSAllocatedStorage": {
            "Default": "5",
            "Description": "The size of the database (Gb)",
            "Type": "Number",
            "MinValue": "5",
            "MaxValue": "1024",
            "ConstraintDescription": "must be between 5 and 1024Gb"
        },
        "RDSInstanceClass": {
            "Default": "db.m4.large",
            "Description": "Database instance class for the provisioned RDS instance.",
            "Type": "String",
            "AllowedValues": [
                "db.m4.large",
                "db.m4.xlarge",
                "db.m4.2xlarge",
                "db.m4.4xlarge",
                "db.m4.10xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge",
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large"
            ],
            "ConstraintDescription": "Must be a valid RDS database instance type."
        },
        "RDSUsername": {
            "Default": "postgres",
            "NoEcho": "false",
            "Description": "The user name associated with the admin account for the provisioned postgres RDS instance",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "RDSPassword": {
            "NoEcho": "true",
            "Description": "The password associated with the admin account for the provisioned postgres RDS instance.",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters."
        },
        "RDSInboundCIDR": {
            "Description": "Allow inbound traffic to RDS from this CIDR range.  Set to '<VPCCIDR>' to use the CIDR of the created VPC.",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|<VPCCIDR>",
            "Default": "<VPCCIDR>",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
        },
        "TableauServerInboundCIDR": {
            "Description": "CIDR from which you may connect to web interface or bastion host (e.g., 1.1.1.1/32)",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "ContentAdminUser": {
            "Description": "The name of the initial Admin user for Tableau server",
            "Type": "String",
            "Default": "admin",
            "MinLength": "1"
        },
        "ContentAdminPassword": {
            "Description": "The password for the initial Admin user for Tableau server",
            "Type": "String",
            "MinLength": "1",
            "NoEcho": "true"
        },
        "TableauServerLicenseKey": {
            "Description": "License Key (leave blank for trial)",
            "Type": "String",
            "Default": ""
        },
        "RegFirstName": {
            "Description": "First Name",
            "Type": "String",
            "MinLength": "1"
        },
        "RegLastName": {
            "Description": "Last Name",
            "Type": "String",
            "MinLength": "1"
        },
        "RegEmail": {
            "Description": "Email",
            "Type": "String",
            "MinLength": "1"
        },
        "RegCompany": {
            "Description": "Company",
            "Type": "String"
        },
        "RegTitle": {
            "Description": "Title",
            "Type": "String"
        },
        "RegDepartment": {
            "Description": "Department",
            "Type": "String"
        },
        "RegIndustry": {
            "Description": "Industry",
            "Type": "String"
        },
        "RegPhone": {
            "Description": "Phone",
            "Type": "String"
        },
        "RegCity": {
            "Description": "City",
            "Type": "String"
        },
        "RegState": {
            "Description": "State",
            "Type": "String"
        },
        "RegZip": {
            "Description": "ZIP/Postal Code",
            "Type": "String"
        },
        "RegCountry": {
            "Description": "Country",
            "Type": "String"
        }
    },
    "Conditions": {
        "NoRDGWInboundCIDRCondition": {
            "Fn::Equals": [
                {
                    "Ref": "RDGWInboundCIDR"
                },
                "<VPCCIDR>"
            ]
        },
        "NoRedshiftInboundCIDRCondition": {
            "Fn::Equals": [
                {
                    "Ref": "RedshiftInboundCIDR"
                },
                "<VPCCIDR>"
            ]
        },
        "NoRDSInboundCIDRCondition": {
            "Fn::Equals": [
                {
                    "Ref": "RDSInboundCIDR"
                },
                "<VPCCIDR>"
            ]
        }
    },
    "Mappings": {
        "AWSInfoRegionMap": {
            "ap-northeast-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-northeast-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-south-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-southeast-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-southeast-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ca-central-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "eu-central-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "eu-west-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "eu-west-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "sa-east-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-east-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-east-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-gov-west-1": {
                "Partition": "aws-us-gov",
                "QuickStartS3URL": "https://s3-us-gov-west-1.amazonaws.com"
            },
            "us-west-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-west-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            }
        },
        "VPCDefinitions": {
            "QuickstartDefault": {
                "CreateAdditionalPrivateSubnets": "false",
                "NATInstanceType": "t2.small",
                "NumberOfAZs": "2",
                "PrivateSubnet1ACIDR": "10.0.0.0/19",
                "PrivateSubnet1BCIDR": "10.0.192.0/21",
                "PrivateSubnet2ACIDR": "10.0.32.0/19",
                "PrivateSubnet2BCIDR": "10.0.200.0/21",
                "PrivateSubnet3ACIDR": "10.0.64.0/19",
                "PrivateSubnet3BCIDR": "10.0.208.0/21",
                "PrivateSubnet4ACIDR": "10.0.96.0/19",
                "PrivateSubnet4BCIDR": "10.0.216.0/21",
                "PublicSubnet1CIDR": "10.0.128.0/20",
                "PublicSubnet2CIDR": "10.0.144.0/20",
                "PublicSubnet3CIDR": "10.0.160.0/20",
                "PublicSubnet4CIDR": "10.0.176.0/20",
                "VPCCIDR": "10.0.0.0/16"
            }
        }
    },
    "Resources": {
        "VPCStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Join": [
                        "/",
                        [
                            {
                                "Fn::FindInMap": [
                                    "AWSInfoRegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "QuickStartS3URL"
                                ]
                            },
                            {
                                "Ref": "QSS3BucketName"
                            },
                            {
                                "Ref": "QSS3KeyPrefix"
                            },
                            "submodules/quickstart-aws-vpc",
                            "templates/aws-vpc.template"
                        ]
                    ]
                },
                "Parameters": {
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "AvailabilityZones": {
                        "Fn::Join": [
                            ",",
                            {
                                "Ref": "AvailabilityZones"
                            }
                        ]
                    },
                    "NumberOfAZs": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "NumberOfAZs"
                        ]
                    },
                    "PrivateSubnet1ACIDR": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "PrivateSubnet1ACIDR"
                        ]
                    },
                    "PrivateSubnet2ACIDR": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "PrivateSubnet2ACIDR"
                        ]
                    },
                    "PrivateSubnet3ACIDR": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "PrivateSubnet3ACIDR"
                        ]
                    },
                    "PrivateSubnet4ACIDR": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "PrivateSubnet4ACIDR"
                        ]
                    },
                    "PublicSubnet1CIDR": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "PublicSubnet1CIDR"
                        ]
                    },
                    "PublicSubnet2CIDR": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "PublicSubnet2CIDR"
                        ]
                    },
                    "PublicSubnet3CIDR": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "PublicSubnet3CIDR"
                        ]
                    },
                    "PublicSubnet4CIDR": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "PublicSubnet4CIDR"
                        ]
                    },
                    "CreateAdditionalPrivateSubnets": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "CreateAdditionalPrivateSubnets"
                        ]
                    },
                    "PrivateSubnet1BCIDR": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "PrivateSubnet1BCIDR"
                        ]
                    },
                    "PrivateSubnet2BCIDR": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "PrivateSubnet2BCIDR"
                        ]
                    },
                    "PrivateSubnet3BCIDR": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "PrivateSubnet3BCIDR"
                        ]
                    },
                    "PrivateSubnet4BCIDR": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "PrivateSubnet4BCIDR"
                        ]
                    },
                    "NATInstanceType": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "NATInstanceType"
                        ]
                    },
                    "VPCCIDR": {
                        "Fn::FindInMap": [
                            "VPCDefinitions",
                            {
                                "Ref": "VPCDefinition"
                            },
                            "VPCCIDR"
                        ]
                    }
                }
            }
        },
        "TableauAwsdataStack": {
            "DependsOn": "VPCStack",
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Join": [
                        "/",
                        [
                            {
                                "Fn::FindInMap": [
                                    "AWSInfoRegionMap",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "QuickStartS3URL"
                                ]
                            },
                            {
                                "Ref": "QSS3BucketName"
                            },
                            {
                                "Ref": "QSS3KeyPrefix"
                            },
                            "templates/quickstart-tableau-awsdata.template"
                        ]
                    ]
                },
                "Parameters": {
                    "RootStackName": {
                        "Ref": "AWS::StackName"
                    },
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "HostedZoneName": {
                        "Ref": "HostedZoneName"
                    },
                    "PrivateSubnet1ID": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.PrivateSubnet1AID"
                        ]
                    },
                    "PrivateSubnet2ID": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.PrivateSubnet2AID"
                        ]
                    },
                    "PublicSubnet1ID": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.PublicSubnet1ID"
                        ]
                    },
                    "PublicSubnet2ID": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.PublicSubnet2ID"
                        ]
                    },
                    "VPCID": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.VPCID"
                        ]
                    },
                    "VPCCIDR": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.VPCCIDR"
                        ]
                    },
                    "RedshiftClusterSubnetID": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.PrivateSubnet1AID"
                        ]
                    },
                    "BastionInboundCIDR": {
                        "Ref": "BastionInboundCIDR"
                    },
                    "BastionAMIOS": {
                        "Ref": "BastionAMIOS"
                    },
                    "BastionInstanceType": {
                        "Ref": "BastionInstanceType"
                    },
                    "Bastion1PrivateIP": {
                        "Ref": "Bastion1PrivateIP"
                    },
                    "Bastion2PrivateIP": {
                        "Ref": "Bastion2PrivateIP"
                    },
                    "BastionBanner": {
                        "Ref": "BastionBanner"
                    },
                    "RDGWAdminPassword": {
                        "Ref": "RDGWAdminPassword"
                    },
                    "RDGWAdminUser": {
                        "Ref": "RDGWAdminUser"
                    },
                    "RDGWInstanceType": {
                        "Ref": "RDGWInstanceType"
                    },
                    "RDGW1NetBIOSName": {
                        "Ref": "RDGW1NetBIOSName"
                    },
                    "RDGW1PrivateIP": {
                        "Ref": "RDGW1PrivateIP"
                    },
                    "RDGW2NetBIOSName": {
                        "Ref": "RDGW2NetBIOSName"
                    },
                    "RDGW2PrivateIP": {
                        "Ref": "RDGW2PrivateIP"
                    },
                    "RDGWInboundCIDR": {
                        "Fn::If": [
                            "NoRDGWInboundCIDRCondition",
                            {
                                "Fn::GetAtt": [
                                    "VPCStack",
                                    "Outputs.VPCCIDR"
                                ]
                            },
                            {
                                "Ref": "RDGWInboundCIDR"
                            }
                        ]
                    },
                    "RedshiftDatabasePort": {
                        "Ref": "RedshiftDatabasePort"
                    },
                    "RedshiftDatabaseName": {
                        "Ref": "RedshiftDatabaseName"
                    },
                    "RedshiftNumberOfNodes": {
                        "Ref": "RedshiftNumberOfNodes"
                    },
                    "RedshiftNodeType": {
                        "Ref": "RedshiftNodeType"
                    },
                    "RedshiftUsername": {
                        "Ref": "RedshiftUsername"
                    },
                    "RedshiftPassword": {
                        "Ref": "RedshiftPassword"
                    },
                    "RedshiftInboundCIDR": {
                        "Fn::If": [
                            "NoRedshiftInboundCIDRCondition",
                            {
                                "Fn::GetAtt": [
                                    "VPCStack",
                                    "Outputs.VPCCIDR"
                                ]
                            },
                            {
                                "Ref": "RedshiftInboundCIDR"
                            }
                        ]
                    },
                    "RDSInstanceIdentifier": {
                        "Ref": "RDSInstanceIdentifier"
                    },
                    "RDSDatabasePort": {
                        "Ref": "RDSDatabasePort"
                    },
                    "RDSDatabaseName": {
                        "Ref": "RDSDatabaseName"
                    },
                    "RDSMultiAZ": {
                        "Ref": "RDSMultiAZ"
                    },
                    "RDSAllocatedStorage": {
                        "Ref": "RDSAllocatedStorage"
                    },
                    "RDSInstanceClass": {
                        "Ref": "RDSInstanceClass"
                    },
                    "RDSUsername": {
                        "Ref": "RDSUsername"
                    },
                    "RDSPassword": {
                        "Ref": "RDSPassword"
                    },
                    "RDSInboundCIDR": {
                        "Fn::If": [
                            "NoRDSInboundCIDRCondition",
                            {
                                "Fn::GetAtt": [
                                    "VPCStack",
                                    "Outputs.VPCCIDR"
                                ]
                            },
                            {
                                "Ref": "RDSInboundCIDR"
                            }
                        ]
                    },
                    "TableauServerInboundCIDR": {
                        "Ref": "TableauServerInboundCIDR"
                    },
                    "ContentAdminUser": {
                        "Ref": "ContentAdminUser"
                    },
                    "ContentAdminPassword": {
                        "Ref": "ContentAdminPassword"
                    },
                    "TableauServerLicenseKey": {
                        "Ref": "TableauServerLicenseKey"
                    },
                    "RegFirstName": {
                        "Ref": "RegFirstName"
                    },
                    "RegLastName": {
                        "Ref": "RegLastName"
                    },
                    "RegEmail": {
                        "Ref": "RegEmail"
                    },
                    "RegCompany": {
                        "Ref": "RegCompany"
                    },
                    "RegTitle": {
                        "Ref": "RegTitle"
                    },
                    "RegDepartment": {
                        "Ref": "RegDepartment"
                    },
                    "RegIndustry": {
                        "Ref": "RegIndustry"
                    },
                    "RegPhone": {
                        "Ref": "RegPhone"
                    },
                    "RegCity": {
                        "Ref": "RegCity"
                    },
                    "RegState": {
                        "Ref": "RegState"
                    },
                    "RegZip": {
                        "Ref": "RegZip"
                    },
                    "RegCountry": {
                        "Ref": "RegCountry"
                    }
                }
            }
        }
    },
    "Outputs": {
        "TableauServerURL": {
            "Description": "URL through which Tableau Server can be accessed.",
            "Value": {
                "Fn::GetAtt": [
                    "TableauAwsdataStack",
                    "Outputs.TableauServerURL"
                ]
            }
        },
        "Bastion1PublicName": {
            "Description": "Convenient Name for Bastion1 Public Access",
            "Value": {
                "Fn::GetAtt": [
                    "TableauAwsdataStack",
                    "Outputs.Bastion1PublicName"
                ]
            }
        },
        "Bastion2PublicName": {
            "Description": "Convenient Name for Bastion2 Public Access",
            "Value": {
                "Fn::GetAtt": [
                    "TableauAwsdataStack",
                    "Outputs.Bastion2PublicName"
                ]
            }
        },
        "RDGW1PublicName": {
            "Description": "Convenient Name for RDGW1 Public Access",
            "Value": {
                "Fn::GetAtt": [
                    "TableauAwsdataStack",
                    "Outputs.RDGW1PublicName"
                ]
            }
        },
        "RDGW2PublicName": {
            "Description": "Convenient Name for RDGW2 Public Access",
            "Value": {
                "Fn::GetAtt": [
                    "TableauAwsdataStack",
                    "Outputs.RDGW2PublicName"
                ]
            }
        },
        "TableauServerPublicName": {
            "Description": "Convenient Name for TableauServer Public Access",
            "Value": {
                "Fn::GetAtt": [
                    "TableauAwsdataStack",
                    "Outputs.TableauServerPublicName"
                ]
            }
        },
        "TableauServerPrivateName": {
            "Description": "Convenient Name for TableauServer Private Access",
            "Value": {
                "Fn::GetAtt": [
                    "TableauAwsdataStack",
                    "Outputs.TableauServerPrivateName"
                ]
            }
        },
        "SqlWorkerPrivateName": {
            "Description": "Convenient Name for SqlWorker Private Access",
            "Value": {
                "Fn::GetAtt": [
                    "TableauAwsdataStack",
                    "Outputs.SqlWorkerPrivateName"
                ]
            }
        },
        "RedshiftPrivateName": {
            "Description": "Convenient Name for Redshift Private Access",
            "Value": {
                "Fn::GetAtt": [
                    "TableauAwsdataStack",
                    "Outputs.RedshiftPrivateName"
                ]
            }
        },
        "RDSPrivateName": {
            "Description": "Convenient Name for Postgres RDS Private Access",
            "Value": {
                "Fn::GetAtt": [
                    "TableauAwsdataStack",
                    "Outputs.RDSPrivateName"
                ]
            }
        }
    }
}